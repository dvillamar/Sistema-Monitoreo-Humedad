#include <LoRaWan_APP.h>
#include "Arduino.h"

// Definición de los pines de los sensores
const int sensor1 = 36;
const int sensor2 = 37;
const int sensor3 = 38;

// Variables para almacenar los valores de los sensores
int sensor1Value = 0;
int sensor2Value = 0;
int sensor3Value = 0;

// Configuración de parámetros LoRa
#define RF_FREQUENCY            915000000 // Hz
#define TX_OUTPUT_POWER         5        // dBm
#define LORA_BANDWIDTH          0        // [0: 125 kHz, 1: 250 kHz, 2: 500 kHz, 3: Reserved]
#define LORA_SPREADING_FACTOR   7        // [SF7..SF12]
#define LORA_CODINGRATE         1        // [1: 4/5, 2: 4/6, 3: 4/7, 4: 4/8]
#define LORA_PREAMBLE_LENGTH    8
#define LORA_SYMBOL_TIMEOUT     0
#define LORA_FIX_LENGTH_PAYLOAD_ON false
#define LORA_IQ_INVERSION_ON    false

// Otros parámetros de configuración
#define RX_TIMEOUT_VALUE        1000
#define BUFFER_SIZE             30 // Define el tamaño del paquete aquí

// Variable para almacenar el paquete de transmisión
char txpacket[BUFFER_SIZE];

// Variable para controlar si el módulo LoRa está listo para transmitir
bool lora_idle = true;

// Definición de eventos de la radio
static RadioEvents_t RadioEvents;
void OnTxDone(void);
void OnTxTimeout(void);

void setup() {
    Serial.begin(115200);
    // Configurar los pines de los sensores como entradas con pull-down
    pinMode(sensor1, INPUT_PULLDOWN);
    pinMode(sensor2, INPUT_PULLDOWN);
    pinMode(sensor3, INPUT_PULLDOWN);
    // Inicializar otros componentes y sensores si es necesario

    // Inicializar la variable de contador de transmisiones
    txNumber = 0;

    // Asignar funciones de eventos para la radio
    RadioEvents.TxDone = OnTxDone;
    RadioEvents.TxTimeout = OnTxTimeout;

    // Inicializar la radio y configurar parámetros
    Radio.Init(&RadioEvents);
    Radio.SetChannel(RF_FREQUENCY);
    Radio.SetTxConfig(MODEM_LORA, TX_OUTPUT_POWER, 0, LORA_BANDWIDTH,
                       LORA_SPREADING_FACTOR, LORA_CODINGRATE,
                       LORA_PREAMBLE_LENGTH, LORA_FIX_LENGTH_PAYLOAD_ON,
                       true, 0, 0, LORA_IQ_INVERSION_ON, 3000); 
}

void loop() {
    // Leer los valores de los sensores si el módulo LoRa está listo para transmitir
    if (lora_idle) {
        delay(10000);

        // Leer los valores de los sensores
        sensor1Value = analogRead(sensor1);
        sensor2Value = analogRead(sensor2);
        sensor3Value = analogRead(sensor3);

        // Realizar cálculos de porcentaje u otras conversiones si es necesario

        // Crear el paquete de datos
        sprintf(txpacket, "t@%.2f@%.2f@%.2f@", sensor1Porcentaje, sensor2Porcentaje, sensor3Porcentaje);

        // Mostrar información en la consola serial
        Serial.printf("\nEnviando Paquete \"%s\", longitud %d\n", txpacket, strlen(txpacket));

        // Enviar el paquete utilizando la radio
        Radio.Send((uint8_t *)txpacket, strlen(txpacket));

        // Marcar que el módulo LoRa no está listo para transmitir hasta que pase el tiempo de espera
        lora_idle = false;
    }

    // Procesar eventos de la radio
    Radio.IrqProcess();
}

// Función llamada cuando la transmisión se ha completado exitosamente
void OnTxDone(void) {
    Serial.println("Transmisión completada.");
    // Marcar que el módulo LoRa está listo para transmitir nuevamente
    lora_idle = true;
}

// Función llamada cuando la transmisión ha fallado debido a un tiempo de espera
void OnTxTimeout(void) {
    Radio.Sleep();
    Serial.println("Tiempo de espera de transmisión agotado.");
    // Marcar que el módulo LoRa está listo para transmitir nuevamente
    lora_idle = true;
}
